-- Rotware Hub v1 - Grow a Garden (Fixed Auto Sell, Auto Plant, Seed Dropdown)
-- Using Luna Interface Suite (no images)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Load Luna Interface Suite from GitHub
local LunaSourceURL = "https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/master/source.lua"
local Luna = loadstring(game:HttpGet(LunaSourceURL))()

-- Variables
local SelectedSeed = nil
local AutoBuyEnabled = false
local AutoPlantEnabled = false
local AutoSellEnabled = false
local AutoBuyDelay = 5
local AutoPlantRandomPoints = false

local WalkspeedEnabled = false
local WalkspeedValue = 16

-- UI Elements placeholders
local seedDropdown, autoBuyToggle, autoPlantToggle, autoSellToggle, walkspeedToggle, walkspeedSlider

-- Helper Functions (Game-specific)
local function getSeedStock()
    -- Returns a table {seedName = count, ...} from Backpack and Character Tools
    local stock = {}
    for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
        if tool:IsA("Tool") then
            stock[tool.Name] = (stock[tool.Name] or 0) + 1
        end
    end
    for _, tool in pairs(Character:GetChildren()) do
        if tool:IsA("Tool") then
            stock[tool.Name] = (stock[tool.Name] or 0) + 1
        end
    end
    return stock
end

local function buySeed(seedName)
    -- Fires the RemoteEvent to buy seed
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local buyEvent = ReplicatedStorage:FindFirstChild("BuySeed")
    if buyEvent and seedName then
        buyEvent:FireServer(seedName)
    end
end

local function getPlantLocations()
    -- Returns a container of parts for planting spots
    local spots = workspace:FindFirstChild("PlantLocations") or workspace:FindFirstChild("PlantSpots") or workspace
    return spots
end

local function plantAtPosition(position, seedName)
    -- Plants the seed at given position by moving character and activating the seed tool
    if not seedName or seedName == "" then return end
    local tool = nil
    for _, t in pairs(LocalPlayer.Backpack:GetChildren()) do
        if t:IsA("Tool") and t.Name == seedName then
            tool = t
            break
        end
    end
    if not tool then
        for _, t in pairs(Character:GetChildren()) do
            if t:IsA("Tool") and t.Name == seedName then
                tool = t
                break
            end
        end
    end
    if tool then
        -- Equip tool
        tool.Parent = Character
        -- Move character close to position
        Character:PivotTo(CFrame.new(position))
        task.wait(0.3)
        -- Activate tool to plant
        tool:Activate()
        task.wait(0.3)
    end
end

local function fireproximityprompt(prompt)
    -- Try to fire proximity prompt (Roblox builtin)
    if prompt and prompt:IsA("ProximityPrompt") and prompt.Enabled then
        local success, err = pcall(function()
            prompt:InputHoldBegin()
            task.wait(0.1)
            prompt:InputHoldEnd()
        end)
        if not success then
            warn("Error firing proximity prompt: "..err)
        end
    end
end

-- UI Setup

local Window = Luna:CreateWindow({
    Title = "Rotware Hub v1 - Grow a Garden",
    Size = Vector2.new(400, 300),
    Theme = Luna.Themes.Dark,
})

-- Seeds Dropdown
seedDropdown = Window:AddDropdown({
    Text = "Select Seed",
    Options = {},
    Callback = function(value)
        SelectedSeed = value
    end,
})

-- Auto Buy Toggle
autoBuyToggle = Window:AddToggle({
    Text = "Auto Buy Seeds",
    Callback = function(enabled)
        AutoBuyEnabled = enabled
        if enabled then
            task.spawn(function()
                while AutoBuyEnabled do
                    if SelectedSeed and SelectedSeed ~= "" then
                        buySeed(SelectedSeed)
                        task.wait(AutoBuyDelay)
                        -- Refresh dropdown after buying
                        refreshSeedDropdown()
                    else
                        task.wait(5)
                    end
                end
            end)
        end
    end,
})

-- Auto Plant Toggle
autoPlantToggle = Window:AddToggle({
    Text = "Auto Plant Seeds",
    Callback = function(enabled)
        AutoPlantEnabled = enabled
        if enabled then
            task.spawn(function()
                while AutoPlantEnabled do
                    if SelectedSeed == nil or SelectedSeed == "" then
                        task.wait(1)
                    else
                        -- Check owned seed count
                        local ownedCount = 0
                        for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
                            if tool:IsA("Tool") and tool.Name == SelectedSeed then
                                ownedCount = ownedCount + 1
                            end
                        end
                        for _, tool in pairs(Character:GetChildren()) do
                            if tool:IsA("Tool") and tool.Name == SelectedSeed then
                                ownedCount = ownedCount + 1
                            end
                        end
                        if ownedCount == 0 then
                            task.wait(3)
                        else
                            local spots = getPlantLocations()
                            local children = spots:GetChildren()
                            if #children == 0 then
                                task.wait(3)
                            else
                                if AutoPlantRandomPoints then
                                    local loc = children[math.random(1, #children)]
                                    if loc:IsA("BasePart") then
                                        plantAtPosition(loc.Position + Vector3.new(0,3,0), SelectedSeed)
                                    end
                                else
                                    for _, loc in pairs(children) do
                                        if not AutoPlantEnabled then break end
                                        if loc:IsA("BasePart") then
                                            plantAtPosition(loc.Position + Vector3.new(0,3,0), SelectedSeed)
                                            task.wait(0.3)
                                        end
                                    end
                                end
                                task.wait(1)
                            end
                        end
                    end
                end
            end)
        end
    end,
})

-- Auto Sell Toggle
autoSellToggle = Window:AddToggle({
    Text = "Auto Sell",
    Callback = function(enabled)
        AutoSellEnabled = enabled
        if enabled then
            task.spawn(function()
                while AutoSellEnabled do
                    local sellPad = workspace:FindFirstChild("SellPad") or workspace:FindFirstChild("SellArea")
                    if sellPad and Character then
                        Character:PivotTo(sellPad.CFrame + Vector3.new(0,3,0))
                        task.wait(1)
                        -- Try fire ProximityPrompt if exists
                        local prompt = nil
                        for _, d in pairs(sellPad:GetDescendants()) do
                            if d:IsA("ProximityPrompt") and d.Enabled then
                                prompt = d
                                break
                            end
                        end
                        if prompt then
                            fireproximityprompt(prompt)
                        end
                    end
                    task.wait(3)
                end
            end)
        end
    end,
})

-- Walkspeed Toggle
walkspeedToggle = Window:AddToggle({
    Text = "Walkspeed",
    Callback = function(enabled)
        WalkspeedEnabled = enabled
        if enabled then
            Humanoid.WalkSpeed = WalkspeedValue
        else
            Humanoid.WalkSpeed = 16
        end
    end,
})

-- Walkspeed Slider
walkspeedSlider = Window:AddSlider({
    Text = "Walkspeed Value",
    Min = 16,
    Max = 100,
    Default = 16,
    Callback = function(value)
        WalkspeedValue = value
        if WalkspeedEnabled then
            Humanoid.WalkSpeed = WalkspeedValue
        end
    end,
})

-- Refresh seed dropdown function
function refreshSeedDropdown()
    local stock = getSeedStock()
    local seeds = {}
    for seedName, _ in pairs(stock) do
        table.insert(seeds, seedName)
    end
    if #seeds > 0 then
        seedDropdown:UpdateOptions(seeds)
        if SelectedSeed == nil or not table.find(seeds, SelectedSeed) then
            SelectedSeed = seeds[1]
            seedDropdown:SetValue(SelectedSeed)
        end
    else
        seedDropdown:UpdateOptions({})
        SelectedSeed = nil
    end
end

-- Refresh seeds on load
refreshSeedDropdown()

-- Also refresh seeds every 10 seconds
task.spawn(function()
    while true do
        refreshSeedDropdown()
        task.wait(10)
    end
end)

-- Clean up on character respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = Character:WaitForChild("Humanoid")
    if WalkspeedEnabled then
        Humanoid.WalkSpeed = WalkspeedValue
    else
        Humanoid.WalkSpeed = 16
    end
end)
