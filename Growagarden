-- Grow a Garden auto-farm script rewritten with Rayfield UI
-- author: depso (depthso)
-- https://www.roblox.com/games/126884695634066

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer:WaitForChild("leaderstats")
local Backpack = LocalPlayer:WaitForChild("Backpack")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local ShecklesCount = Leaderstats:WaitForChild("Sheckles")
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

--// Game folders and events
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local Farms = workspace:WaitForChild("Farm")

--// Globals for toggles and settings
local SelectedSeed, AutoPlantRandom, AutoPlant, AutoHarvest, AutoBuy, AutoSell, SellThreshold, NoClip, AutoWalkAllowRandom, AutoWalkMaxWait
local AutoWalk, AutoWalkStatus
local HarvestIgnores = {
	Normal = false,
	Gold = false,
	Rainbow = false
}

--// Helper functions

local function Plant(Position: Vector3, Seed: string)
	GameEvents.Plant_RE:FireServer(Position, Seed)
	wait(0.3)
end

local function GetFarms()
	return Farms:GetChildren()
end

local function GetFarmOwner(Farm: Folder): string
	local Important = Farm:FindFirstChild("Important")
	if not Important then return "" end
	local Data = Important:FindFirstChild("Data")
	if not Data then return "" end
	local Owner = Data:FindFirstChild("Owner")
	if not Owner then return "" end
	return Owner.Value
end

local function GetFarm(PlayerName: string)
	for _, Farm in ipairs(GetFarms()) do
		if GetFarmOwner(Farm) == PlayerName then
			return Farm
		end
	end
	return nil
end

local IsSelling = false
local function SellInventory()
	if IsSelling then return end
	IsSelling = true

	local Character = LocalPlayer.Character
	if not Character then IsSelling = false return end
	local PreviousCFrame = Character:GetPivot()
	local PreviousSheckles = ShecklesCount.Value

	Character:PivotTo(CFrame.new(62, 4, -26)) -- Selling location
	while wait() do
		if ShecklesCount.Value ~= PreviousSheckles then break end
		GameEvents.Sell_Inventory:FireServer()
	end

	Character:PivotTo(PreviousCFrame)
	wait(0.2)
	IsSelling = false
end

local function BuySeed(Seed: string)
	GameEvents.BuySeedStock:FireServer(Seed)
end

local function GetSeedStock(IgnoreNoStock)
	local SeedShop = PlayerGui:FindFirstChild("Seed_Shop")
	if not SeedShop then return {} end

	local Items = SeedShop:FindFirstChild("Blueberry", true)
	if not Items or not Items.Parent then return {} end

	local NewList = {}
	for _, Item in ipairs(Items.Parent:GetChildren()) do
		local MainFrame = Item:FindFirstChild("Main_Frame")
		if not MainFrame then continue end

		local StockText = MainFrame.Stock_Text.Text
		local StockCount = tonumber(StockText:match("%d+"))
		if not StockCount then StockCount = 0 end

		if IgnoreNoStock and StockCount <= 0 then
			continue
		end

		NewList[Item.Name] = StockCount
	end
	return NewList
end

local OwnedSeeds = {}
local function GetSeedInfo(Seed)
	local PlantName = Seed:FindFirstChild("Plant_Name")
	local Count = Seed:FindFirstChild("Numbers")
	if not PlantName or not Count then return nil, nil end
	return PlantName.Value, Count.Value
end

local function CollectSeedsFromParent(Parent, Seeds)
	for _, Tool in ipairs(Parent:GetChildren()) do
		local Name, Count = GetSeedInfo(Tool)
		if not Name then continue end
		Seeds[Name] = {Count = Count, Tool = Tool}
	end
end

local function GetOwnedSeeds()
	OwnedSeeds = {}
	CollectSeedsFromParent(Backpack, OwnedSeeds)
	local Character = LocalPlayer.Character
	if Character then
		CollectSeedsFromParent(Character, OwnedSeeds)
	end
	return OwnedSeeds
end

local function EquipCheck(Tool)
	local Character = LocalPlayer.Character
	if not Character then return end
	local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
	if not Humanoid then return end
	if Tool.Parent ~= Backpack then return end
	Humanoid:EquipTool(Tool)
end

local MyFarm = GetFarm(LocalPlayer.Name)
local PlantLocations, PlantsPhysical
local X1, Z1, X2, Z2

if MyFarm then
	local Important = MyFarm:FindFirstChild("Important")
	if Important then
		PlantLocations = Important:FindFirstChild("Plant_Locations")
		PlantsPhysical = Important:FindFirstChild("Plants_Physical")
		local Dirt = PlantLocations and PlantLocations:FindFirstChildOfClass("Part")
		if Dirt then
			local Center = Dirt:GetPivot()
			local Size = Dirt.Size
			X1 = math.ceil(Center.X - (Size.X / 2))
			Z1 = math.ceil(Center.Z - (Size.Z / 2))
			X2 = math.floor(Center.X + (Size.X / 2))
			Z2 = math.floor(Center.Z + (Size.Z / 2))
		end
	end
end

local function GetRandomFarmPoint()
	if not PlantLocations then return Vector3.new(0, 0, 0) end
	local FarmLands = PlantLocations:GetChildren()
	if #FarmLands == 0 then return Vector3.new(0, 0, 0) end
	local FarmLand = FarmLands[math.random(1, #FarmLands)]
	local X1r, Z1r, X2r, Z2r = 0, 0, 0, 0
	do
		local Center = FarmLand:GetPivot()
		local Size = FarmLand.Size
		X1r = math.ceil(Center.X - (Size.X / 2))
		Z1r = math.ceil(Center.Z - (Size.Z / 2))
		X2r = math.floor(Center.X + (Size.X / 2))
		Z2r = math.floor(Center.Z + (Size.Z / 2))
	end
	local X = math.random(X1r, X2r)
	local Z = math.random(Z1r, Z2r)
	return Vector3.new(X, 4, Z)
end

local function AutoPlantLoop()
	local Seed = SelectedSeed.Value
	if not Seed or Seed == "" then return end

	local SeedData = OwnedSeeds[Seed]
	if not SeedData then return end
	local Count = SeedData.Count
	local Tool = SeedData.Tool
	if Count <= 0 then return end

	EquipCheck(Tool)

	local Planted = 0
	local Step = 1

	if AutoPlantRandom.Value then
		for i = 1, Count do
			local Point = GetRandomFarmPoint()
			Plant(Point, Seed)
		end
	end

	for X = X1, X2, Step do
		for Z = Z1, Z2, Step do
			if Planted >= Count then break end
			local Point = Vector3.new(X, 0.13, Z)
			Planted += 1
			Plant(Point, Seed)
		end
	end
end

local function HarvestPlant(Plant)
	if not Plant then return end
	local Prompt = Plant:FindFirstChildOfClass("ProximityPrompt")
	if Prompt and Prompt.Enabled then
		fireproximityprompt(Prompt)
	end
end

local function CanHarvest(Plant)
	local Prompt = Plant:FindFirstChildOfClass("ProximityPrompt")
	return Prompt and Prompt.Enabled
end

local function CollectHarvestable(Parent, Plants, IgnoreDistance)
	local Character = LocalPlayer.Character
	if not Character then return end
	local PlayerPosition = Character:GetPivot().Position
	for _, Plant in ipairs(Parent:GetChildren()) do
		local Fruits = Plant:FindFirstChild("Fruits")
		if Fruits then
			CollectHarvestable(Fruits, Plants, IgnoreDistance)
		end

		local PlantPosition = Plant:GetPivot().Position
		local Distance = (PlayerPosition - PlantPosition).Magnitude
		if not IgnoreDistance and Distance > 15 then continue end

		local Variant = Plant:FindFirstChild("Variant")
		if Variant and HarvestIgnores[Variant.Value] then continue end

		if CanHarvest(Plant) then
			table.insert(Plants, Plant)
		end
	end
	return Plants
end

local function GetHarvestablePlants(IgnoreDistance)
	return CollectHarvestable(PlantsPhysical, {}, IgnoreDistance)
end

local function HarvestPlants()
	local Plants = GetHarvestablePlants()
	for _, Plant in ipairs(Plants) do
		HarvestPlant(Plant)
	end
end

local function GetInvCrops()
	local Character = LocalPlayer.Character
	if not Character then return {} end
	local Crops = {}
	local function CollectCropsFromParent(Parent)
		for _, Tool in ipairs(Parent:GetChildren()) do
			if Tool:FindFirstChild("Item_String") then
				table.insert(Crops, Tool)
			end
		end
	end
	CollectCropsFromParent(Backpack)
	CollectCropsFromParent(Character)
	return Crops
end

local function AutoSellCheck()
	if not AutoSell.Value then return end
	local CropCount = #GetInvCrops()
	if CropCount < SellThreshold.Value then return end
	SellInventory()
end

local function AutoWalkLoop()
	if IsSelling then return end
	local Character = LocalPlayer.Character
	if not Character then return end
	local Humanoid = Character:FindFirstChildOfClass("Humanoid")
	if not Humanoid then return end

	local Plants = GetHarvestablePlants(true)
	local RandomAllowed = AutoWalkAllowRandom.Value
	local DoRandom = #Plants == 0 or math.random(1, 3) == 2

	if RandomAllowed and DoRandom then
		local Position = GetRandomFarmPoint()
		Humanoid:MoveTo(Position)
		AutoWalkStatus:Set("Random point")
		return
	end

	for _, Plant in ipairs(Plants) do
		local Position = Plant:GetPivot().Position
		Humanoid:MoveTo(Position)
		AutoWalkStatus:Set(Plant.Name)
	end
end

local function NoclipLoop()
	local Character = LocalPlayer.Character
	if not NoClip.Value then return end
	if not Character then return end

	for _, Part in ipairs(Character:GetDescendants()) do
		if Part:IsA("BasePart") then
			Part.CanCollide = false
		end
	end
end

local function MakeLoop(Toggle, Func)
	coroutine.wrap(function()
		while wait(0.01) do
			if not Toggle.Value then continue end
			Func()
		end
	end)()
end

local function StartServices()
	MakeLoop(AutoWalk, function()
		AutoWalkLoop()
		wait(math.random(1, AutoWalkMaxWait.Value))
	end)

	MakeLoop(AutoHarvest, HarvestPlants)
	MakeLoop(AutoBuy, function()
		local seed = SelectedSeedStock.Value
		if not seed or seed == "" then return end
		local stock = SeedStock[seed] or 0
		if stock <= 0 then return end
		for i = 1, stock do
			BuySeed(seed)
		end
	end)
	MakeLoop(AutoPlant, AutoPlantLoop)

	while wait(0.1) do
		SeedStock = GetSeedStock()
		GetOwnedSeeds()
	end
end

--// UI Setup with Rayfield

local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
	Name = GameInfo.Name .. " | depso",
	LoadingTitle = "Loading Grow a Garden Script",
	LoadingSubtitle = "by depso",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "GrowAGardenScript",
		FileName = "config",
	},
})

-- Create Tabs
local AutoPlantTab = Window:CreateTab("Auto-Plant 🥕")
local AutoHarvestTab = Window:CreateTab("Auto-Harvest 🚜")
local AutoBuyTab = Window:CreateTab("Auto-Buy 🛒")
local AutoSellTab = Window:CreateTab("Auto-Sell 💰")
local AutoWalkTab = Window:CreateTab("Auto-Walk 🚶")
local NoClipTab = Window:CreateTab("NoClip ✨")
local HarvestIgnoreTab = Window:CreateTab("Harvest Ignore 🚫")

-- Create Sections inside Tabs
local AutoPlantSection = AutoPlantTab:CreateSection("Settings")
local AutoHarvestSection = AutoHarvestTab:CreateSection("Settings")
local AutoBuySection = AutoBuyTab:CreateSection("Settings")
local AutoSellSection = AutoSellTab:CreateSection("Settings")
local AutoWalkSection = AutoWalkTab:CreateSection("Settings")
local NoClipSection = NoClipTab:CreateSection("Settings")
local HarvestIgnoreSection = HarvestIgnoreTab:CreateSection("Settings")

-- Selected seed dropdown (auto plant)
local seedOptions = {}
for seedName, _ in pairs(GetOwnedSeeds()) do
	table.insert(seedOptions, seedName)
end
if #seedOptions == 0 then
	table.insert(seedOptions, "None")
end

local SelectedSeedDropdown = AutoPlantSection:CreateDropdown({
	Name = "Seed to Plant",
	Options = seedOptions,
	CurrentOption = seedOptions[1],
	Flag = "SelectedSeed",
	Callback = function(option)
		SelectedSeed = {Value = option}
	end,
})

-- AutoPlant Toggle
local AutoPlantToggle = AutoPlantSection:CreateToggle({
	Name = "Auto Plant",
	CurrentValue = false,
	Flag = "AutoPlant",
	Callback = function(value)
		AutoPlant = {Value = value}
		if value then
			coroutine.wrap(AutoPlantLoop)()
		end
	end,
})

local AutoPlantRandomToggle = AutoPlantSection:CreateToggle({
	Name = "Plant Random",
	CurrentValue = false,
	Flag = "AutoPlantRandom",
	Callback = function(value)
		AutoPlantRandom = {Value = value}
	end,
})

-- AutoHarvest Toggle
local AutoHarvestToggle = AutoHarvestSection:CreateToggle({
	Name = "Auto Harvest",
	CurrentValue = false,
	Flag = "AutoHarvest",
	Callback = function(value)
		AutoHarvest = {Value = value}
		if value then
			coroutine.wrap(HarvestPlants)()
		end
	end,
})

-- AutoBuy Toggle and dropdown (buy seed stock)
local AutoBuyToggle = AutoBuySection:CreateToggle({
	Name = "Auto Buy Seeds",
	CurrentValue = false,
	Flag = "AutoBuy",
	Callback = function(value)
		AutoBuy = {Value = value}
	end,
})

local seedStockOptions = {}
for seedName, count in pairs(GetSeedStock(false)) do
	table.insert(seedStockOptions, seedName)
end
if #seedStockOptions == 0 then
	table.insert(seedStockOptions, "None")
end

local SelectedSeedStockDropdown = AutoBuySection:CreateDropdown({
	Name = "Seed To Buy",
	Options = seedStockOptions,
	CurrentOption = seedStockOptions[1],
	Flag = "SelectedSeedStock",
	Callback = function(option)
		SelectedSeedStock = option
	end,
})

-- AutoSell Toggle and threshold slider
local AutoSellToggle = AutoSellSection:CreateToggle({
	Name = "Auto Sell",
	CurrentValue = false,
	Flag = "AutoSell",
	Callback = function(value)
		AutoSell = {Value = value}
	end,
})

local SellThresholdSlider = AutoSellSection:CreateSlider({
	Name = "Sell Threshold",
	Min = 1,
	Max = 500,
	Increment = 1,
	Suffix = " items",
	CurrentValue = 100,
	Flag = "SellThreshold",
	Callback = function(value)
		SellThreshold = {Value = value}
	end,
})

-- AutoWalk Toggles and slider
local AutoWalkToggle = AutoWalkSection:CreateToggle({
	Name = "Auto Walk",
	CurrentValue = false,
	Flag = "AutoWalk",
	Callback = function(value)
		AutoWalk = {Value = value}
	end,
})

local AutoWalkAllowRandomToggle = AutoWalkSection:CreateToggle({
	Name = "Allow Random Walking",
	CurrentValue = true,
	Flag = "AutoWalkAllowRandom",
	Callback = function(value)
		AutoWalkAllowRandom = {Value = value}
	end,
})

local AutoWalkMaxWaitSlider = AutoWalkSection:CreateSlider({
	Name = "Max Walk Wait (seconds)",
	Min = 1,
	Max = 10,
	Increment = 1,
	Suffix = "s",
	CurrentValue = 5,
	Flag = "AutoWalkMaxWait",
	Callback = function(value)
		AutoWalkMaxWait = {Value = value}
	end,
})

-- NoClip Toggle
local NoClipToggle = NoClipSection:CreateToggle({
	Name = "NoClip",
	CurrentValue = false,
	Flag = "NoClip",
	Callback = function(value)
		NoClip = {Value = value}
		if value then
			while NoClip.Value do
				NoclipLoop()
				wait(0.1)
			end
		end
	end,
})

-- Harvest Ignore Toggles
local NormalIgnoreToggle = HarvestIgnoreSection:CreateToggle({
	Name = "Ignore Normal Plants",
	CurrentValue = false,
	Flag = "IgnoreNormal",
	Callback = function(value)
		HarvestIgnores.Normal = value
	end,
})

local GoldIgnoreToggle = HarvestIgnoreSection:CreateToggle({
	Name = "Ignore Gold Plants",
	CurrentValue = false,
	Flag = "IgnoreGold",
	Callback = function(value)
		HarvestIgnores.Gold = value
	end,
})

local RainbowIgnoreToggle = HarvestIgnoreSection:CreateToggle({
	Name = "Ignore Rainbow Plants",
	CurrentValue = false,
	Flag = "IgnoreRainbow",
	Callback = function(value)
		HarvestIgnores.Rainbow = value
	end,
})

-- AutoWalk Status Label
local AutoWalkStatusLabel = AutoWalkSection:CreateLabel("Auto Walk Status: Idle")
AutoWalkStatus = {
	Set = function(text)
		AutoWalkStatusLabel:Set(text)
	end,
}

-- Initialization defaults
SelectedSeed = {Value = seedOptions[1] or "None"}
SelectedSeedStock = seedStockOptions[1] or "None"
AutoPlantRandom = {Value = false}
AutoPlant = {Value = false}
AutoHarvest = {Value = false}
AutoBuy = {Value = false}
AutoSell = {Value = false}
SellThreshold = {Value = 100}
NoClip = {Value = false}
AutoWalkAllowRandom = {Value = true}
AutoWalkMaxWait = {Value = 5}
AutoWalk = {Value = false}

-- Main loops
coroutine.wrap(function()
	while wait(0.1) do
		if AutoPlant.Value then
			AutoPlantLoop()
		end
		if AutoHarvest.Value then
			HarvestPlants()
		end
		if AutoBuy.Value then
			local stock = GetSeedStock(false)[SelectedSeedStock] or 0
			if stock > 0 then
				BuySeed(SelectedSeedStock)
			end
		end
		if AutoSell.Value then
			local crops = GetInvCrops()
			if #crops >= SellThreshold.Value then
				SellInventory()
			end
		end
		if AutoWalk.Value then
			AutoWalkLoop()
		end
		if NoClip.Value then
			NoclipLoop()
		end
	end
end)()

