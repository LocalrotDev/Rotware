--[[
    @author depso (depthso)
    @description Grow a Garden auto-farm script with Rayfield UI
    https://www.roblox.com/games/126884695634066
]]

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InsertService = game:GetService("InsertService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer.leaderstats
local Backpack = LocalPlayer.Backpack
local PlayerGui = LocalPlayer.PlayerGui

local ShecklesCount = Leaderstats.Sheckles
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

--// Game Events and Folders
local GameEvents = ReplicatedStorage.GameEvents
local Farms = workspace.Farm

--// Accent Colors (not used directly, but can be for customizations)
local Accent = {
    DarkGreen = Color3.fromRGB(45, 95, 25),
    Green = Color3.fromRGB(69, 142, 40),
    Brown = Color3.fromRGB(26, 20, 8),
}

--// Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = GameInfo.Name .. " | Depso",
    LoadingTitle = "Loading Grow a Garden Hub",
    LoadingSubtitle = "by depso",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "GrowAGardenHub",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
    },
    KeySystem = false
})

--// Globals & State
local SeedStock = {}         -- seed name => count in stock
local OwnedSeeds = {}        -- seed name => {Count, Tool}
local HarvestIgnores = {
    Normal = false,
    Gold = false,
    Rainbow = false
}

local SelectedSeed = nil
local AutoPlantRandom = false
local AutoPlant = false
local AutoHarvest = false
local AutoBuy = false
local SellThreshold = 15
local NoClip = false
local AutoWalkAllowRandom = false

local IsSelling = false

--// Utility Functions

local function Plant(Position, Seed)
    GameEvents.Plant_RE:FireServer(Position, Seed)
    wait(0.3)
end

local function GetFarms()
    return Farms:GetChildren()
end

local function GetFarmOwner(Farm)
    local Important = Farm:FindFirstChild("Important")
    if not Important then return nil end
    local Data = Important:FindFirstChild("Data")
    if not Data then return nil end
    local Owner = Data:FindFirstChild("Owner")
    if not Owner then return nil end
    return Owner.Value
end

local function GetFarm(PlayerName)
    for _, Farm in pairs(GetFarms()) do
        if GetFarmOwner(Farm) == PlayerName then
            return Farm
        end
    end
    return nil
end

local function SellInventory()
    local Character = LocalPlayer.Character
    if not Character then return end
    local Previous = Character:GetPivot()
    local PreviousSheckles = ShecklesCount.Value

    if IsSelling then return end
    IsSelling = true

    Character:PivotTo(CFrame.new(62, 4, -26))
    while wait() do
        if ShecklesCount.Value ~= PreviousSheckles then break end
        GameEvents.Sell_Inventory:FireServer()
    end
    Character:PivotTo(Previous)

    wait(0.2)
    IsSelling = false
end

local function BuySeed(Seed)
    GameEvents.BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
    local Seed = SelectedSeed
    local Stock = SeedStock[Seed]

    if not Stock or Stock <= 0 then return end

    for i = 1, Stock do
        BuySeed(Seed)
        wait(0.15)
    end
end

local function GetSeedInfo(Tool)
    local PlantName = Tool:FindFirstChild("Plant_Name")
    local Count = Tool:FindFirstChild("Numbers")
    if not PlantName or not Count then return end

    return PlantName.Value, Count.Value
end

local function CollectSeedsFromParent(Parent, Seeds)
    for _, Tool in pairs(Parent:GetChildren()) do
        local Name, Count = GetSeedInfo(Tool)
        if Name then
            Seeds[Name] = {
                Count = Count,
                Tool = Tool
            }
        end
    end
end

local function CollectCropsFromParent(Parent, Crops)
    for _, Tool in pairs(Parent:GetChildren()) do
        local Name = Tool:FindFirstChild("Item_String")
        if Name then
            table.insert(Crops, Tool)
        end
    end
end

local function GetOwnedSeeds()
    local Character = LocalPlayer.Character
    if not Character then return {} end
    OwnedSeeds = {}
    CollectSeedsFromParent(Backpack, OwnedSeeds)
    CollectSeedsFromParent(Character, OwnedSeeds)
    return OwnedSeeds
end

local function GetInvCrops()
    local Character = LocalPlayer.Character
    if not Character then return {} end
    local Crops = {}
    CollectCropsFromParent(Backpack, Crops)
    CollectCropsFromParent(Character, Crops)
    return Crops
end

local function GetArea(Base)
    local Center = Base:GetPivot()
    local Size = Base.Size

    local X1 = math.ceil(Center.X - (Size.X / 2))
    local Z1 = math.ceil(Center.Z - (Size.Z / 2))

    local X2 = math.floor(Center.X + (Size.X / 2))
    local Z2 = math.floor(Center.Z + (Size.Z / 2))

    return X1, Z1, X2, Z2
end

local function EquipCheck(Tool)
    local Character = LocalPlayer.Character
    if not Character then return false end
    local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
    if not Humanoid then return false end
    if Humanoid and Tool then
        Humanoid:EquipTool(Tool)
        return true
    end
    return false
end

local function IsPointEmpty(Position)
    local Parts = workspace:FindPartsInRegion3WithIgnoreList(
        Region3.new(Position - Vector3.new(1, 1, 1), Position + Vector3.new(1, 1, 1)),
        {LocalPlayer.Character},
        10
    )
    for _, Part in pairs(Parts) do
        if Part.CanCollide and Part.Transparency < 0.5 then
            return false
        end
    end
    return true
end

local function AutoPlantLoop()
    spawn(function()
        while AutoPlant do
            local Farm = GetFarm(LocalPlayer.Name)
            if Farm then
                local Base = Farm:FindFirstChild("Base")
                if Base and SelectedSeed and OwnedSeeds[SelectedSeed] and OwnedSeeds[SelectedSeed].Count > 0 then
                    local X1, Z1, X2, Z2 = GetArea(Base)
                    local PlantPosition = nil
                    if AutoPlantRandom then
                        for _ = 1, 10 do
                            local randX = math.random(X1, X2)
                            local randZ = math.random(Z1, Z2)
                            local position = Vector3.new(randX, Base.Position.Y + 1, randZ)
                            if IsPointEmpty(position) then
                                PlantPosition = position
                                break
                            end
                        end
                    else
                        -- Plant in center
                        PlantPosition = Base.Position + Vector3.new(0, 1, 0)
                    end
                    if PlantPosition then
                        Plant(PlantPosition, SelectedSeed)
                    end
                end
            end
            wait(1)
        end
    end)
end

local function AutoHarvestLoop()
    spawn(function()
        while AutoHarvest do
            local Crops = GetInvCrops()
            for _, Crop in pairs(Crops) do
                if Crop and Crop.Parent then
                    local HarvestType = Crop:FindFirstChild("Harvest_Type")
                    if HarvestType then
                        local Ignore = HarvestIgnores[HarvestType.Value]
                        if not Ignore then
                            GameEvents.Harvest_Plant:FireServer(Crop)
                        end
                    else
                        GameEvents.Harvest_Plant:FireServer(Crop)
                    end
                    wait(0.3)
                end
            end
            wait(1)
        end
    end)
end

local function AutoBuyLoop()
    spawn(function()
        while AutoBuy do
            BuyAllSelectedSeeds()
            wait(5)
        end
    end)
end

local function AutoSellLoop()
    spawn(function()
        while true do
            if ShecklesCount.Value >= SellThreshold then
                SellInventory()
            end
            wait(10)
        end
    end)
end

local function ToggleNoClip(enabled)
    NoClip = enabled
    local Character = LocalPlayer.Character
    if not Character then return end
    local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
    if not HumanoidRootPart then return end

    if NoClip then
        RunService.Stepped:Connect(function()
            if Character and HumanoidRootPart then
                HumanoidRootPart.CanCollide = false
            end
        end)
    else
        HumanoidRootPart.CanCollide = true
    end
end

local function AutoWalkLoop()
    spawn(function()
        while true do
            if AutoWalkAllowRandom then
                local Farm = GetFarm(LocalPlayer.Name)
                if Farm then
                    local Base = Farm:FindFirstChild("Base")
                    if Base then
                        local X1, Z1, X2, Z2 = GetArea(Base)
                        local randX = math.random(X1, X2)
                        local randZ = math.random(Z1, Z2)
                        LocalPlayer.Character:PivotTo(CFrame.new(randX, Base.Position.Y + 3, randZ))
                    end
                end
            end
            wait(5)
        end
    end)
end

--// Update OwnedSeeds periodically
spawn(function()
    while true do
        GetOwnedSeeds()
        wait(5)
    end
end)

--// UI Setup

local AutoPlantSection = Window:CreateSection("Auto-Plant ðŸ¥•")

local SeedDropdown = AutoPlantSection:CreateDropdown({
    Name = "Seed",
    Options = function()
        local seeds = {}
        for k, v in pairs(SeedStock) do
            table.insert(seeds, k)
        end
        return seeds
    end,
    CurrentOption = "",
    Flag = "SelectedSeed",
    Callback = function(option)
        SelectedSeed = option
    end
})

local AutoPlantToggle = AutoPlantSection:CreateToggle({
    Name = "Enabled",
    CurrentValue = false,
    Flag = "AutoPlant",
    Callback = function(value)
        AutoPlant = value
        if value then
            AutoPlantLoop()
        end
    end
})

local AutoPlantRandomToggle = AutoPlantSection:CreateToggle({
    Name = "Plant at random points",
    CurrentValue = false,
    Flag = "AutoPlantRandom",
    Callback = function(value)
        AutoPlantRandom = value
    end
})

local PlantAllButton = AutoPlantSection:CreateButton({
    Name = "Plant All",
    Callback = function()
        AutoPlantLoop()
    end
})

local AutoHarvestSection = Window:CreateSection("Auto-Harvest ðŸŒ¾")

local AutoHarvestToggle = AutoHarvestSection:CreateToggle({
    Name = "Enabled",
    CurrentValue = false,
    Flag = "AutoHarvest",
    Callback = function(value)
        AutoHarvest = value
        if value then
            AutoHarvestLoop()
        end
    end
})

AutoHarvestSection:CreateToggle({
    Name = "Ignore Normal Crops",
    CurrentValue = false,
    Callback = function(value)
        HarvestIgnores.Normal = value
    end
})

AutoHarvestSection:CreateToggle({
    Name = "Ignore Gold Crops",
    CurrentValue = false,
    Callback = function(value)
        HarvestIgnores.Gold = value
    end
})

AutoHarvestSection:CreateToggle({
    Name = "Ignore Rainbow Crops",
    CurrentValue = false,
    Callback = function(value)
        HarvestIgnores.Rainbow = value
    end
})

local AutoBuySection = Window:CreateSection("Auto-Buy ðŸ›’")

local AutoBuyToggle = AutoBuySection:CreateToggle({
    Name = "Enabled",
    CurrentValue = false,
    Flag = "AutoBuy",
    Callback = function(value)
        AutoBuy = value
        if value then
            AutoBuyLoop()
        end
    end
})

local SellSection = Window:CreateSection("Auto-Sell ðŸ’°")

local SellThresholdSlider = SellSection:CreateSlider({
    Name = "Sell When Sheckles â‰¥",
    Range = {0, 100},
    Increment = 1,
    Suffix = " Sheckles",
    CurrentValue = SellThreshold,
    Flag = "SellThreshold",
    Callback = function(value)
        SellThreshold = value
    end
})

-- Start auto sell loop once
AutoSellLoop()

local MiscSection = Window:CreateSection("Miscellaneous")

MiscSection:CreateToggle({
    Name = "Enable NoClip",
    CurrentValue = false,
    Callback = function(value)
        ToggleNoClip(value)
    end
})

MiscSection:CreateToggle({
    Name = "Auto Walk Randomly",
    CurrentValue = false,
    Callback = function(value)
        AutoWalkAllowRandom = value
        if value then
            AutoWalkLoop()
        end
    end
})

--// Update SeedStock periodically
spawn(function()
    while true do
        SeedStock = {}
        for _, Seed in pairs(ReplicatedStorage.SeedStock:GetChildren()) do
            SeedStock[Seed.Name] = Seed.Amount.Value
        end
        wait(10)
    end
end)
