--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InsertService = game:GetService("InsertService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer:WaitForChild("leaderstats")
local Backpack = LocalPlayer:WaitForChild("Backpack")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local ShecklesCount = Leaderstats:WaitForChild("Sheckles")
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

--// Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Rayfield/main/source"))()

local Window = Rayfield:CreateWindow({
	Name = GameInfo.Name .. " | Rotware Hub",
	LoadingTitle = "Rotware Garden",
	LoadingSubtitle = "by depso",
	ConfigurationSaving = {
		Enabled = false,
		FolderName = nil,
		FileName = "RotwareGarden"
	},
	Discord = {
		Enabled = false,
		Invite = "",
		RememberJoins = false
	},
	KeySystem = false,
	KeySettings = {}
})

--// Folders
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local Farms = workspace:WaitForChild("Farm")

--// Globals
local SelectedSeed = ""
local AutoPlant = false
local AutoPlantRandom = false
local AutoHarvest = false
local AutoBuy = false
local AutoSell = false
local NoClip = false
local AutoWalk = false
local AutoWalkAllowRandom = true
local AutoWalkMaxWait = 10
local SellThreshold = 15

local SeedStock = {}
local OwnedSeeds = {}
local HarvestIgnores = { Normal = false, Gold = false, Rainbow = false }

local AutoWalkStatusLabel = nil
local SelectedSeedStock = ""

--// Utility Functions
local function Plant(Position, Seed)
	GameEvents.Plant_RE:FireServer(Position, Seed)
	task.wait(0.3)
end

local function GetFarms()
	return Farms:GetChildren()
end

local function GetFarmOwner(Farm)
	return Farm.Important.Data.Owner.Value
end

local function GetFarm(PlayerName)
	for _, Farm in next, GetFarms() do
		if GetFarmOwner(Farm) == PlayerName then
			return Farm
		end
	end
end

local function GetArea(Base)
	local Center = Base:GetPivot()
	local Size = Base.Size
	local X1 = math.ceil(Center.X - (Size.X / 2))
	local Z1 = math.ceil(Center.Z - (Size.Z / 2))
	local X2 = math.floor(Center.X + (Size.X / 2))
	local Z2 = math.floor(Center.Z + (Size.Z / 2))
	return X1, Z1, X2, Z2
end

local MyFarm = GetFarm(LocalPlayer.Name)
local MyImportant = MyFarm.Important
local PlantLocations = MyImportant.Plant_Locations
local PlantsPhysical = MyImportant.Plants_Physical
local Dirt = PlantLocations:FindFirstChildOfClass("Part")
local X1, Z1, X2, Z2 = GetArea(Dirt)

local function GetRandomFarmPoint()
	local FarmLand = PlantLocations:GetChildren()[math.random(1, #PlantLocations:GetChildren())]
	local X1, Z1, X2, Z2 = GetArea(FarmLand)
	return Vector3.new(math.random(X1, X2), 4, math.random(Z1, Z2))
end

local function GetSeedInfo(Seed)
	local PlantName = Seed:FindFirstChild("Plant_Name")
	local Count = Seed:FindFirstChild("Numbers")
	if not PlantName then return end
	return PlantName.Value, Count.Value
end

local function CollectSeeds(Parent)
	for _, Tool in next, Parent:GetChildren() do
		local Name, Count = GetSeedInfo(Tool)
		if Name then
			OwnedSeeds[Name] = { Count = Count, Tool = Tool }
		end
	end
end

local function GetOwnedSeeds()
	CollectSeeds(Backpack)
	CollectSeeds(LocalPlayer.Character)
	return OwnedSeeds
end

local function EquipCheck(Tool)
	if Tool and Tool.Parent == Backpack then
		LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(Tool)
	end
end

local function AutoPlantLoop()
	local SeedData = OwnedSeeds[SelectedSeed]
	if not SeedData then return end
	if SeedData.Count <= 0 then return end
	EquipCheck(SeedData.Tool)
	if AutoPlantRandom then
		for i = 1, SeedData.Count do
			Plant(GetRandomFarmPoint(), SelectedSeed)
		end
	else
		local Planted = 0
		for x = X1, X2, 1 do
			for z = Z1, Z2, 1 do
				if Planted > SeedData.Count then return end
				Plant(Vector3.new(x, 0.13, z), SelectedSeed)
				Planted += 1
			end
		end
	end
end

local function GetSeedStock(ignoreZero)
	local SeedShop = PlayerGui.Seed_Shop
	local Items = SeedShop:FindFirstChild("Blueberry", true).Parent
	local NewList = {}
	for _, Item in next, Items:GetChildren() do
		local Main = Item:FindFirstChild("Main_Frame")
		if not Main then continue end
		local count = tonumber(Main.Stock_Text.Text:match("%d+")) or 0
		if not ignoreZero or count > 0 then
			SeedStock[Item.Name] = count
			NewList[Item.Name] = count
		end
	end
	return NewList
end

local function BuySeed(Seed)
	GameEvents.BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
	local stock = SeedStock[SelectedSeedStock]
	if not stock then return end
	for i = 1, stock do
		BuySeed(SelectedSeedStock)
	end
end

local function HarvestPlant(Plant)
	local prompt = Plant:FindFirstChild("ProximityPrompt", true)
	if prompt and prompt.Enabled then
		fireproximityprompt(prompt)
	end
end

local function CanHarvest(Plant)
	local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
	return Prompt and Prompt.Enabled
end

local function GetHarvestablePlants(ignoreDistance)
	local plants, pos = {}, LocalPlayer.Character:GetPivot().Position
	for _, Plant in next, PlantsPhysical:GetChildren() do
		if Plant:FindFirstChild("Fruits") then
			for _, Sub in next, Plant.Fruits:GetChildren() do
				if CanHarvest(Sub) then table.insert(plants, Sub) end
			end
		end
		if ignoreDistance or (Plant:GetPivot().Position - pos).Magnitude <= 15 then
			local Variant = Plant:FindFirstChild("Variant")
			if Variant and not HarvestIgnores[Variant.Value] then
				if CanHarvest(Plant) then
					table.insert(plants, Plant)
				end
			end
		end
	end
	return plants
end

local function HarvestLoop()
	for _, Plant in next, GetHarvestablePlants() do
		HarvestPlant(Plant)
	end
end

local function SellInventory()
	if _G.IsSelling then return end
	_G.IsSelling = true
	local Character = LocalPlayer.Character
	local Prev = Character:GetPivot()
	local PrevCount = ShecklesCount.Value
	Character:PivotTo(CFrame.new(62, 4, -26))
	repeat
		GameEvents.Sell_Inventory:FireServer()
		task.wait()
	until ShecklesCount.Value ~= PrevCount
	Character:PivotTo(Prev)
	task.wait(0.2)
	_G.IsSelling = false
end

local function GetInvCrops()
	local Crops = {}
	for _, Tool in next, Backpack:GetChildren() do
		if Tool:FindFirstChild("Item_String") then
			table.insert(Crops, Tool)
		end
	end
	for _, Tool in next, LocalPlayer.Character:GetChildren() do
		if Tool:FindFirstChild("Item_String") then
			table.insert(Crops, Tool)
		end
	end
	return Crops
end

local function AutoSellCheck()
	if AutoSell and #GetInvCrops() >= SellThreshold then
		SellInventory()
	end
end

local function AutoWalkLoop()
	if _G.IsSelling then return end
	local Human = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	local Plants = GetHarvestablePlants(true)
	if AutoWalkAllowRandom and (#Plants == 0 or math.random(1,3) == 2) then
		Human:MoveTo(GetRandomFarmPoint())
		AutoWalkStatusLabel:Set("Random point")
	else
		for _, Plant in next, Plants do
			Human:MoveTo(Plant:GetPivot().Position)
			AutoWalkStatusLabel:Set(Plant.Name)
		end
	end
end

local function NoclipLoop()
	if not NoClip then return end
	for _, Part in LocalPlayer.Character:GetDescendants() do
		if Part:IsA("BasePart") then
			Part.CanCollide = false
		end
	end
end

--// UI Elements
Window:CreateLabel("ðŸ¥• Auto-Plant")
Window:CreateDropdown({
	Name = "Seed",
	Options = function()
		local seeds = {}
		for k in pairs(SeedStock) do table.insert(seeds, k) end
		return seeds
	end,
	CurrentOption = "",
	Flag = "SelectedSeed",
	Callback = function(option) SelectedSeed = option end
})
Window:CreateToggle({
	Name = "Enabled",
	CurrentValue = false,
	Callback = function(v) AutoPlant = v end
})
Window:CreateToggle({
	Name = "Plant at random points",
	CurrentValue = false,
	Callback = function(v) AutoPlantRandom = v end
})
Window:CreateButton({
	Name = "Plant All",
	Callback = AutoPlantLoop
})

Window:CreateLabel("ðŸšœ Auto-Harvest")
Window:CreateToggle({
	Name = "Enabled",
	CurrentValue = false,
	Callback = function(v) AutoHarvest = v end
})
for key, _ in pairs(HarvestIgnores) do
	Window:CreateToggle({
		Name = "Ignore: "..key,
		CurrentValue = false,
		Callback = function(v) HarvestIgnores[key] = v end
	})
end

Window:CreateLabel("ðŸ’° Auto-Sell")
Window:CreateButton({ Name = "Sell Inventory", Callback = SellInventory })
Window:CreateToggle({
	Name = "Enabled",
	CurrentValue = false,
	Callback = function(v) AutoSell = v end
})
Window:CreateSlider({
	Name = "Crops Threshold",
	Range = {1,199},
	Increment = 1,
	CurrentValue = 15,
	Callback = function(v) SellThreshold = v end
})

Window:CreateLabel("ðŸ›’ Auto-Buy")
Window:CreateDropdown({
	Name = "Seed",
	Options = function()
		local stock = GetSeedStock(true)
		local items = {}
		for k in pairs(stock) do table.insert(items, k) end
		return items
	end,
	CurrentOption = "",
	Callback = function(option) SelectedSeedStock = option end
})
Window:CreateToggle({
	Name = "Enabled",
	CurrentValue = false,
	Callback = function(v) AutoBuy = v end
})
Window:CreateButton({
	Name = "Buy All",
	Callback = BuyAllSelectedSeeds
})

Window:CreateLabel("ðŸš¶ Auto-Walk")
AutoWalkStatusLabel = Window:CreateLabel("Status: None")
Window:CreateToggle({
	Name = "Enabled",
	CurrentValue = false,
	Callback = function(v) AutoWalk = v end
})
Window:CreateToggle({
	Name = "Allow Random Points",
	CurrentValue = true,
	Callback = function(v) AutoWalkAllowRandom = v end
})
Window:CreateToggle({
	Name = "NoClip",
	CurrentValue = false,
	Callback = function(v) NoClip = v end
})
Window:CreateSlider({
	Name = "Max Delay",
	Range = {1, 120},
	Increment = 1,
	CurrentValue = 10,
	Callback = function(v) AutoWalkMaxWait = v end
})

--// Background Loops
RunService.Stepped:Connect(NoclipLoop)
Backpack.ChildAdded:Connect(AutoSellCheck)

coroutine.wrap(function()
	while task.wait(.01) do
		if AutoHarvest then HarvestLoop() end
		if AutoBuy then BuyAllSelectedSeeds() end
		if AutoPlant then AutoPlantLoop() end
		if AutoWalk then
			AutoWalkLoop()
			task.wait(math.random(1, AutoWalkMaxWait))
		end
	end
end)()

coroutine.wrap(function()
	while task.wait(0.3) do
		GetSeedStock()
		GetOwnedSeeds()
	end
end)()
