-- Grow a Garden Auto-Farm Script (Rayfield UI Version)
-- Author: depso (depthso) | Converted by ChatGPT

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MarketplaceService = game:GetService("MarketplaceService")
local RunService = game:GetService("RunService")
local InsertService = game:GetService("InsertService")

local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Leaderstats = LocalPlayer:WaitForChild("leaderstats")
local ShecklesCount = Leaderstats:WaitForChild("Sheckles")

local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local Farms = workspace:WaitForChild("Farm")
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

--// Rayfield
loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
    Name = GameInfo.Name .. " | Depso",
    LoadingTitle = "Rotware Hub v1",
    LoadingSubtitle = "by depso",
    ConfigurationSaving = {
        Enabled = false
    },
    Discord = {
        Enabled = false
    },
    KeySystem = false
})

--// Variables
local SelectedSeed = ""
local AutoPlant = false
local AutoPlantRandom = false
local AutoHarvest = false
local AutoBuy = false
local AutoSell = false
local AutoWalk = false
local NoClip = false
local AutoWalkAllowRandom = true
local AutoWalkMaxWait = 10
local SellThreshold = 15
local SeedStock = {}
local OwnedSeeds = {}
local HarvestIgnores = {
    Normal = false,
    Gold = false,
    Rainbow = false
}

local function GetFarms()
    return Farms:GetChildren()
end

local function GetFarmOwner(Farm)
    return Farm.Important.Data.Owner.Value
end

local function GetFarm(PlayerName)
    for _, Farm in next, GetFarms() do
        if GetFarmOwner(Farm) == PlayerName then
            return Farm
        end
    end
end

local function GetArea(Base)
    local Center = Base.Position
    local Size = Base.Size
    local X1 = math.ceil(Center.X - Size.X/2)
    local Z1 = math.ceil(Center.Z - Size.Z/2)
    local X2 = math.floor(Center.X + Size.X/2)
    local Z2 = math.floor(Center.Z + Size.Z/2)
    return X1, Z1, X2, Z2
end

local function GetSeedInfo(Tool)
    local PlantName = Tool:FindFirstChild("Plant_Name")
    local Count = Tool:FindFirstChild("Numbers")
    if not PlantName then return end
    return PlantName.Value, Count and Count.Value
end

local function CollectSeedsFrom(Parent)
    for _, Tool in pairs(Parent:GetChildren()) do
        local Name, Count = GetSeedInfo(Tool)
        if Name then
            OwnedSeeds[Name] = { Count = Count, Tool = Tool }
        end
    end
end

local function GetOwnedSeeds()
    OwnedSeeds = {}
    CollectSeedsFrom(LocalPlayer.Character)
    CollectSeedsFrom(Backpack)
    return OwnedSeeds
end

local function CollectCropsFrom(Parent, Crops)
    for _, Tool in pairs(Parent:GetChildren()) do
        local Name = Tool:FindFirstChild("Item_String")
        if Name then
            table.insert(Crops, Tool)
        end
    end
end

local function GetInvCrops()
    local Crops = {}
    CollectCropsFrom(LocalPlayer.Character, Crops)
    CollectCropsFrom(Backpack, Crops)
    return Crops
end

local function Plant(Position, Seed)
    GameEvents.Plant_RE:FireServer(Position, Seed)
    wait(.3)
end

local MyFarm = GetFarm(LocalPlayer.Name)
local MyImportant = MyFarm.Important
local PlantLocations = MyImportant.Plant_Locations
local PlantsPhysical = MyImportant.Plants_Physical
local Dirt = PlantLocations:FindFirstChildOfClass("Part")
local X1, Z1, X2, Z2 = GetArea(Dirt)

local function GetRandomFarmPoint()
    local Locations = PlantLocations:GetChildren()
    local Land = Locations[math.random(1, #Locations)]
    local X1, Z1, X2, Z2 = GetArea(Land)
    return Vector3.new(math.random(X1, X2), 4, math.random(Z1, Z2))
end

local function EquipTool(Tool)
    if Tool.Parent == Backpack then
        LocalPlayer.Character.Humanoid:EquipTool(Tool)
    end
end

local function AutoPlantLoop()
    local Seeds = GetOwnedSeeds()
    local SeedData = Seeds[SelectedSeed]
    if not SeedData then return end

    local Tool = SeedData.Tool
    local Count = SeedData.Count
    if Count <= 0 then return end

    EquipTool(Tool)

    if AutoPlantRandom then
        for i = 1, Count do
            Plant(GetRandomFarmPoint(), SelectedSeed)
        end
    else
        for X = X1, X2 do
            for Z = Z1, Z2 do
                Plant(Vector3.new(X, 0.13, Z), SelectedSeed)
            end
        end
    end
end

local function HarvestPlant(Plant)
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    if Prompt and Prompt.Enabled then
        fireproximityprompt(Prompt)
    end
end

local function CollectHarvestable(Parent, List, IgnoreDistance)
    local CharPos = LocalPlayer.Character:GetPivot().Position
    for _, Plant in pairs(Parent:GetChildren()) do
        local Fruits = Plant:FindFirstChild("Fruits")
        if Fruits then
            CollectHarvestable(Fruits, List, IgnoreDistance)
        end
        local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
        local Variant = Plant:FindFirstChild("Variant")
        local Dist = (CharPos - Plant:GetPivot().Position).Magnitude
        if Prompt and Prompt.Enabled and (IgnoreDistance or Dist <= 15) and not HarvestIgnores[Variant and Variant.Value or ""] then
            table.insert(List, Plant)
        end
    end
end

local function GetHarvestablePlants(IgnoreDistance)
    local List = {}
    CollectHarvestable(PlantsPhysical, List, IgnoreDistance)
    return List
end

local function HarvestPlants()
    for _, Plant in pairs(GetHarvestablePlants()) do
        HarvestPlant(Plant)
    end
end

local function SellInventory()
    local Prev = LocalPlayer.Character:GetPivot()
    LocalPlayer.Character:PivotTo(CFrame.new(62, 4, -26))
    local PrevVal = ShecklesCount.Value
    repeat
        GameEvents.Sell_Inventory:FireServer()
        wait()
    until ShecklesCount.Value ~= PrevVal
    LocalPlayer.Character:PivotTo(Prev)
end

local function AutoSellCheck()
    if AutoSell and #GetInvCrops() >= SellThreshold then
        SellInventory()
    end
end

local function BuySeed(Seed)
    GameEvents.BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
    local Stock = SeedStock[SelectedSeed]
    if not Stock then return end
    for _ = 1, Stock do
        BuySeed(SelectedSeed)
    end
end

local function GetSeedStock()
    local Shop = PlayerGui:WaitForChild("Seed_Shop")
    local Items = Shop:FindFirstChild("Blueberry", true).Parent:GetChildren()
    for _, Item in pairs(Items) do
        local Frame = Item:FindFirstChild("Main_Frame")
        if Frame then
            local Stock = tonumber(Frame.Stock_Text.Text:match("%d+"))
            SeedStock[Item.Name] = Stock
        end
    end
    return SeedStock
end

local function AutoWalkLoop()
    if AutoWalk then
        local Plants = GetHarvestablePlants(true)
        local Char = LocalPlayer.Character
        local Hum = Char.Humanoid
        if AutoWalkAllowRandom and (#Plants == 0 or math.random(1,3)==2) then
            Hum:MoveTo(GetRandomFarmPoint())
        else
            for _, Plant in pairs(Plants) do
                Hum:MoveTo(Plant:GetPivot().Position)
            end
        end
    end
end

local function NoClipLoop()
    if NoClip then
        for _, Part in pairs(LocalPlayer.Character:GetDescendants()) do
            if Part:IsA("BasePart") then
                Part.CanCollide = false
            end
        end
    end
end

--// Rayfield UI Setup
Window:CreateLabel("ðŸ¥• Auto Plant")
Window:CreateDropdown({
    Name = "Seed",
    Options = function()
        local keys = {}
        for k in pairs(GetSeedStock()) do
            table.insert(keys, k)
        end
        return keys
    end,
    CurrentOption = "",
    Flag = "SelectedSeed",
    Callback = function(option)
        SelectedSeed = option
    end
})
Window:CreateToggle({
    Name = "Auto Plant",
    CurrentValue = false,
    Callback = function(v) AutoPlant = v end
})
Window:CreateToggle({
    Name = "Plant at Random Points",
    CurrentValue = false,
    Callback = function(v) AutoPlantRandom = v end
})
Window:CreateButton({
    Name = "Plant All Now",
    Callback = AutoPlantLoop
})

Window:CreateLabel("ðŸšœ Auto Harvest")
Window:CreateToggle({ Name="Enabled", CurrentValue=false, Callback=function(v) AutoHarvest = v end })
for k in pairs(HarvestIgnores) do
    Window:CreateToggle({
        Name = "Ignore: " .. k,
        CurrentValue = false,
        Callback = function(v) HarvestIgnores[k] = v end
    })
end

Window:CreateLabel("ðŸ›’ Auto Buy")
Window:CreateToggle({ Name="Enabled", CurrentValue=false, Callback=function(v) AutoBuy = v end })
Window:CreateButton({ Name = "Buy All", Callback = BuyAllSelectedSeeds })

Window:CreateLabel("ðŸ’° Auto Sell")
Window:CreateToggle({ Name="Enabled", CurrentValue=false, Callback=function(v) AutoSell = v end })
Window:CreateSlider({
    Name = "Sell Threshold",
    Range = {1, 100},
    Increment = 1,
    CurrentValue = 15,
    Callback = function(v) SellThreshold = v end
})
Window:CreateButton({ Name = "Sell Inventory", Callback = SellInventory })

Window:CreateLabel("ðŸš¶ Auto Walk")
Window:CreateToggle({ Name = "Enabled", CurrentValue = false, Callback = function(v) AutoWalk = v end })
Window:CreateToggle({ Name = "Allow Random Points", CurrentValue = true, Callback = function(v) AutoWalkAllowRandom = v end })
Window:CreateSlider({ Name = "Max Delay", Range = {1, 30}, Increment = 1, CurrentValue = 10, Callback = function(v) AutoWalkMaxWait = v end })
Window:CreateToggle({ Name = "NoClip", CurrentValue = false, Callback = function(v) NoClip = v end })

--// Main Loops
RunService.Stepped:Connect(NoClipLoop)
Backpack.ChildAdded:Connect(AutoSellCheck)

coroutine.wrap(function()
    while task.wait(.5) do
        if AutoHarvest then HarvestPlants() end
        if AutoPlant then AutoPlantLoop() end
        if AutoBuy then BuyAllSelectedSeeds() end
        if AutoWalk then AutoWalkLoop() wait(math.random(1, AutoWalkMaxWait)) end
    end
end)()
